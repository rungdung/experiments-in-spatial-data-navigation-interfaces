# ## more interesting start conditions
# m <- matrix(0, 400, 400)
# m[5:345, 19:300] <- 1
# init(conway) <- m
# plot(sim(conway), col=c("white", "green"), axes = FALSE)
#
#
# ## change survival rules
# parms(conway) <- list(srv = c(1,2,3,4), gen = c(3, 4))
# plot(sim(conway), col = c("white", "green"), axes = FALSE)
## Not run:
require("tcltk")
init(conway) <- matrix(0, 20, 20)
#conway <- editInit(conway) # enter some "1"
m[5:2, 11:17] <- 1
sim(conway, animate = TRUE, delay = 100)
##============================================
## Implementation:
##   The code of Conways Game of Life
##============================================
conway <- new("gridModel",
main = function(time, init, parms) {
x      <- init
nb     <- eightneighbours(x) #ext function to sum the states of eightneighbours
surviv <- (x >  0 & (nb %in% parms$survIf))
gener  <- (x == 0 & (nb %in% parms$genIf))
x      <- (surviv + gener) > 0
return(x)
},
parms  = list(survIf = c(2, 3), genIf = 3),
times  = 1:30,
init   = matrix(round(runif(1000)), ncol = 40),
solver = "iteration"
)
## End(Not run)
##============================================
## Basic Usage:
##   explore the example
##============================================
data(conway)
# plot(sim(conway))
#
# ## more interesting start conditions
# m <- matrix(0, 400, 400)
# m[5:345, 19:300] <- 1
# init(conway) <- m
# plot(sim(conway), col=c("white", "green"), axes = FALSE)
#
#
# ## change survival rules
# parms(conway) <- list(srv = c(1,2,3,4), gen = c(3, 4))
# plot(sim(conway), col = c("white", "green"), axes = FALSE)
## Not run:
require("tcltk")
init(conway) <- matrix(0, 20, 20)
#conway <- editInit(conway) # enter some "1"
m[5:7, 11:17] <- 1
sim(conway, animate = TRUE, delay = 100)
##============================================
## Implementation:
##   The code of Conways Game of Life
##============================================
conway <- new("gridModel",
main = function(time, init, parms) {
x      <- init
nb     <- eightneighbours(x) #ext function to sum the states of eightneighbours
surviv <- (x >  0 & (nb %in% parms$survIf))
gener  <- (x == 0 & (nb %in% parms$genIf))
x      <- (surviv + gener) > 0
return(x)
},
parms  = list(survIf = c(2, 3), genIf = 3),
times  = 1:30,
init   = matrix(round(runif(1000)), ncol = 40),
solver = "iteration"
)
## End(Not run)
##============================================
## Basic Usage:
##   explore the example
##============================================
data(conway)
# plot(sim(conway))
#
# ## more interesting start conditions
# m <- matrix(0, 400, 400)
# m[5:345, 19:300] <- 1
# init(conway) <- m
# plot(sim(conway), col=c("white", "green"), axes = FALSE)
#
#
# ## change survival rules
# parms(conway) <- list(srv = c(1,2,3,4), gen = c(3, 4))
# plot(sim(conway), col = c("white", "green"), axes = FALSE)
## Not run:
require("tcltk")
init(conway) <- matrix(0, 20, 20)
#conway <- editInit(conway) # enter some "1"
m[5:10, 11:17] <- 1
sim(conway, animate = TRUE, delay = 100)
##============================================
## Implementation:
##   The code of Conways Game of Life
##============================================
conway <- new("gridModel",
main = function(time, init, parms) {
x      <- init
nb     <- eightneighbours(x) #ext function to sum the states of eightneighbours
surviv <- (x >  0 & (nb %in% parms$survIf))
gener  <- (x == 0 & (nb %in% parms$genIf))
x      <- (surviv + gener) > 0
return(x)
},
parms  = list(survIf = c(2, 3), genIf = 3),
times  = 1:30,
init   = matrix(round(runif(1000)), ncol = 40),
solver = "iteration"
)
## End(Not run)
##============================================
## Basic Usage:
##   explore the example
##============================================
data(conway)
# plot(sim(conway))
#
# ## more interesting start conditions
# m <- matrix(0, 400, 400)
# m[5:345, 19:300] <- 1
# init(conway) <- m
# plot(sim(conway), col=c("white", "green"), axes = FALSE)
#
#
# ## change survival rules
# parms(conway) <- list(srv = c(1,2,3,4), gen = c(3, 4))
# plot(sim(conway), col = c("white", "green"), axes = FALSE)
## Not run:
require("tcltk")
init(conway) <- matrix(0, 20, 20)
conway <- editInit(conway) # enter some "1"
#m[5:10, 11:17] <- 1
sim(conway, animate = TRUE, delay = 100)
##============================================
## Implementation:
##   The code of Conways Game of Life
##============================================
conway <- new("gridModel",
main = function(time, init, parms) {
x      <- init
nb     <- eightneighbours(x) #ext function to sum the states of eightneighbours
surviv <- (x >  0 & (nb %in% parms$survIf))
gener  <- (x == 0 & (nb %in% parms$genIf))
x      <- (surviv + gener) > 0
return(x)
},
parms  = list(survIf = c(2, 3), genIf = 3),
times  = 1:30,
init   = matrix(round(runif(1000)), ncol = 40),
solver = "iteration"
)
## End(Not run)
library(st)
library(sf)
library(sf)
#https://stackoverflow.com/questions/44214487/create-sf-object-from-two-column-matrix
# for(r in 1:nrow(m)){
#   for(c in 1:ncol(m)){
#     if (m[r,c]==1){
#
#     }
#   }
# }
map<-m %>%
list %>%
st_polygon() %>%
st_as_sf()
points<-matrix(,1,1)
library(sf)
points<-matrix(0,1,1)
https://stackoverflow.com/questions/44214487/create-sf-object-from-two-column-matrix
library(sf)
points<-matrix(0,1,1)
#https://stackoverflow.com/questions/44214487/create-sf-object-from-two-column-matrix
for(r in 1:nrow(m)){
for(c in 1:ncol(m)){
if (m[r,c]==1){
point<-c(r,c)
points<-rbind(points,point)
}
}
}
library(sf)
points<-matrix(0,1,1)
#https://stackoverflow.com/questions/44214487/create-sf-object-from-two-column-matrix
for(r in 1:nrow(m)){
for(c in 1:ncol(m)){
if (m[r,c]==1){
point<-c(r,c)
points<-rbind(points,point)
}
}
}
knitr::opts_chunk$set(echo = TRUE)
library(simecol)
library(tidyverse)
library(sf)
library(raster)
library(rgdal)
library(sp)
library(maptools)
install.packages(maptools)
knitr::opts_chunk$set(echo = TRUE)
library(simecol)
library(tidyverse)
library(sf)
library(raster)
library(rgdal)
library(sp)
library(maptools)
data(conway)
require("tcltk")
## Manually entering initial matrix
##============================================
# m <- matrix(0, 400, 400)
# m[5:345, 19:300] <- 1
# init(conway) <- m
# plot(sim(conway), col=c("white", "green"), axes = FALSE)
init(conway) <- matrix(0, 20, 20)
conway <- editInit(conway) # manually enter some "1" into the initial matrix and close the window
result<-out(sim(conway)) # Type: list. Outputs matrices containing 1's and 0's. Each generation is a matrix.
## change survival rules
##============================================
# parms(conway) <- list(srv = c(1,2,3,4), gen = c(3, 4))
# plot(sim(conway), col = c("white", "green"), axes = FALSE)
## The code of Conways Game of Life
##============================================
conway <- new("gridModel",
main = function(time, init, parms) {
x      <- init
nb     <- eightneighbours(x) # external function to sum the states of the eight neighbours
# Conditions for survival and generation
surviv <- ifelse(x >  0 & (nb %in% parms$survIf), 1, 0) # conditions for life to survive
gener  <- ifelse(x == 0 & (nb %in% parms$genIf), 1, 0 ) # conditions for life to generate
x      <- (surviv + gener) > 0 # current state
return(x)
},
parms  = list(survIf = c(2, 4), genIf = 3), # survival conditions, play with it to create varied final generations
times  = 1:10, # number of iters
init   = matrix(round(runif(1000)), ncol = 20), # Constructor default
solver = "iteration" # Don't understand how solvers work in Simecol yet.
)
plot(sim(conway), col = c("#282A36", "#F8766D"), axes = FALSE) # graphical output
result1<-out(sim(conway)) # Type: List. Outputs in boolean, why does entering in manually and simulating output give in int and this in Boolean?
# ref https://stackoverflow.com/questions/44214487/create-sf-object-from-two-column-matrix
points<-matrix(0,1,2) # Init a matrix
matr<-sapply(result1, tail, 1) # get the last generation's matrix from the result list
for(r in 1:nrow(matr)){
for(c in 1:ncol(matr)){ # iterate through the matrix
if (matr[r,c]==TRUE){ # If the cell is alive, get the coordinates of the cell and input into matrix
point<-c(r,c)
points<-rbind(points,point)
}
}
}
## Attempts to create an sf object
#points[1,]<-points[nrow(points),]
mapPoints<-points %>%
as.data.frame %>%
st_as_sf(coords = c(1,2)) # Read column 1 and 2 into sf obj
WGScoor<-  mapPoints
coordinates(WGScoor)=~long+lat
knit_with_parameters("~/Vault/Areas/SMI/Semester 3/Cycle 1/CAC Landscape and Tools/Harassment in Yelli/Harassment-in-Yelli.rmd")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(sf)
library(leaflet)
library(leaflet.providers)
library(leaflet.extras)
library(rgdal)
library(htmltools)
#addProviderTiles(providers$CartoDB.Positron) not working
map <- leaflet(allCoords) %>%
addTiles(urlTemplate = mapUrl) %>%
fitBounds(77.564292,13.096725,77.591393,13.109996) %>%
setMaxBounds(77.554808, 13.087922, 77.608495, 13.114213) %>%
addScaleBar() %>%
addLayersControl(
#baseGroups = c("Incidents"),
overlayGroups = c("Heat Map","Incidents"),
options = layersControlOptions(collapsed = FALSE)
) %>%
addMarkers(
#label = allCoords$`Describe the incident in detail`,
#labelOptions = labelOptions(textsize = "10px", width),
popup = paste(allData$popupText),
popupOptions = popupOptions(maxWidth = 400),
#clusterOptions = clusterOptions(),
#fillColor = ~pal(`Year of Occurence`),
group = "Incidents"
) %>%
addHeatmap(
radius = 20,
blur = 20,
intensity = 0.7,
cellSize = 0.1,
minOpacity = 0.4,
max = 0.9,
group = "Heat Map"
)
#addProviderTiles(providers$CartoDB.Positron) not working
map <- leaflet(allCoords) %>%
addTiles(urlTemplate = mapUrl) %>%
fitBounds(77.564292,13.096725,77.591393,13.109996) %>%
setMaxBounds(77.554808, 13.087922, 77.608495, 13.114213) %>%
addScaleBar() %>%
addLayersControl(
#baseGroups = c("Incidents"),
overlayGroups = c("Heat Map","Incidents"),
options = layersControlOptions(collapsed = FALSE)
) %>%
addMarkers(
#label = allCoords$`Describe the incident in detail`,
#labelOptions = labelOptions(textsize = "10px", width),
popup = paste(allData$popupText),
popupOptions = popupOptions(maxWidth = 400),
#clusterOptions = clusterOptions(),
#fillColor = ~pal(`Year of Occurence`),
group = "Incidents"
) %>%
addHeatmap(
radius = 20,
blur = 20,
intensity = 0.7,
cellSize = 0.1,
minOpacity = 0.4,
max = 0.9,
group = "Heat Map"
)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(sf)
library(leaflet)
library(leaflet.providers)
library(leaflet.extras)
library(rgdal)
library(htmltools)
oldHarassData <- read_csv('../resources/assets/formResponses2.csv')
#oldHarassData <- oldHarassData %>% separate(., col = `What are the exact coordinates of the incident?`, into = c("Location.lat", "Location.lon"), sep = "\\,")
newHarassData <-read_csv('../resources/assets/ushahidiResponses2.csv')
mapUrl="https://api.mapbox.com/styles/v1/rungdung/cku6gh76r1dvh17o3zkfllvjz/tiles/256/{z}/{x}/{y}@2x?access_token=pk.eyJ1IjoicnVuZ2R1bmciLCJhIjoiY2tqeWh6cXF4MDgzMjJvbWVmbGQzYjAwMyJ9.U-aJyoqyKvTXlhVk43jV1A"
allData <- rbind(oldHarassData,newHarassData)
allData <- rename(allData, lat=Location.lat, lng = Location.lon)
# Attach a coordinate reference
allCoords <- allData %>%
st_as_sf(coords = c('lng', 'lat'),crs = 4326)
allData$popupText <-
paste0('<strong>', allData$`Describe the incident in one line`, '</strong>',
'<br/> <br/>',
format(
as.Date(allData$`When and at what time this happen?`,format='%y/%m/%d'),
format='%B %d, %Y'),
'<br/> <br/>',
allData$`Describe the incident in detail`, ' ') %>%
lapply(htmltools::HTML)
#addProviderTiles(providers$CartoDB.Positron) not working
map <- leaflet(allCoords) %>%
addTiles(urlTemplate = mapUrl) %>%
fitBounds(77.564292,13.096725,77.591393,13.109996) %>%
setMaxBounds(77.554808, 13.087922, 77.608495, 13.114213) %>%
addScaleBar() %>%
addLayersControl(
#baseGroups = c("Incidents"),
overlayGroups = c("Heat Map","Incidents"),
options = layersControlOptions(collapsed = FALSE)
) %>%
addMarkers(
#label = allCoords$`Describe the incident in detail`,
#labelOptions = labelOptions(textsize = "10px", width),
popup = paste(allData$popupText),
popupOptions = popupOptions(maxWidth = 400),
#clusterOptions = clusterOptions(),
#fillColor = ~pal(`Year of Occurence`),
group = "Incidents"
) %>%
addHeatmap(
radius = 20,
blur = 20,
intensity = 0.7,
cellSize = 0.1,
minOpacity = 0.4,
max = 0.9,
group = "Heat Map"
)
# Layers
# addPolygons(data = emptyPlot,
#             color = 'grey',
#             stroke=FALSE,
#             label = emptyPlot$Name,
#             group="Empty Plots") %>%
# addPolygons(data = infrasPlot,
#             color = 'red',
#             stroke=FALSE,
#             label = infrasPlot$Name,
#             group="Dilipated infrastructure") %>%
# addPolygons(data = shopPlot,
#             color = 'green',
#             stroke=FALSE,
#             label = shopPlot$Name,
#             group="Shops")
map
oldHarassData <- read_csv('../resources/assets/formResponses2.csv')
#oldHarassData <- oldHarassData %>% separate(., col = `What are the exact coordinates of the incident?`, into = c("Location.lat", "Location.lon"), sep = "\\,")
newHarassData <-read_csv('../resources/assets/ushahidiResponses2.csv')
mapUrl="https://api.mapbox.com/styles/v1/rungdung/cku6gh76r1dvh17o3zkfllvjz/tiles/256/{z}/{x}/{y}@2x?access_token=pk.eyJ1IjoicnVuZ2R1bmciLCJhIjoiY2tqeWh6cXF4MDgzMjJvbWVmbGQzYjAwMyJ9.U-aJyoqyKvTXlhVk43jV1A"
allData <- rbind(oldHarassData,newHarassData)
allData <- rename(allData, lat=Location.lat, lng = Location.lon)
# Attach a coordinate reference
allCoords <- allData %>%
st_as_sf(coords = c('lng', 'lat'),crs = 4326)
allData$popupText <-
paste0('<strong>', allData$`Describe the incident in one line`, '</strong>',
'<br/> <br/>',
format(
as.Date(allData$`When and at what time this happen?`,format='%y/%m/%d'),
format='%B %d, %Y'),
'<br/> <br/>',
allData$`Describe the incident in detail`, ' ') %>%
lapply(htmltools::HTML)
#addProviderTiles(providers$CartoDB.Positron) not working
map <- leaflet(allCoords) %>%
addTiles(urlTemplate = mapUrl) %>%
fitBounds(77.564292,13.096725,77.591393,13.109996) %>%
setMaxBounds(77.554808, 13.087922, 77.608495, 13.114213) %>%
addScaleBar() %>%
addLayersControl(
#baseGroups = c("Incidents"),
overlayGroups = c("Heat Map","Incidents"),
options = layersControlOptions(collapsed = FALSE)
) %>%
addMarkers(
#label = allCoords$`Describe the incident in detail`,
#labelOptions = labelOptions(textsize = "10px", width),
popup = paste(allData$popupText),
popupOptions = popupOptions(maxWidth = 400),
#clusterOptions = clusterOptions(),
#fillColor = ~pal(`Year of Occurence`),
group = "Incidents"
) %>%
addHeatmap(
radius = 20,
blur = 20,
intensity = 0.7,
cellSize = 0.1,
minOpacity = 0.4,
max = 0.9,
group = "Heat Map"
)
# Layers
# addPolygons(data = emptyPlot,
#             color = 'grey',
#             stroke=FALSE,
#             label = emptyPlot$Name,
#             group="Empty Plots") %>%
# addPolygons(data = infrasPlot,
#             color = 'red',
#             stroke=FALSE,
#             label = infrasPlot$Name,
#             group="Dilipated infrastructure") %>%
# addPolygons(data = shopPlot,
#             color = 'green',
#             stroke=FALSE,
#             label = shopPlot$Name,
#             group="Shops")
map
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(sf)
library(leaflet)
library(leaflet.providers)
library(leaflet.extras)
library(rgdal)
library(htmltools)
oldHarassData <- read_csv('../resources/assets/formResponses2.csv')
#oldHarassData <- oldHarassData %>% separate(., col = `What are the exact coordinates of the incident?`, into = c("Location.lat", "Location.lon"), sep = "\\,")
newHarassData <-read_csv('../resources/assets/ushahidiResponses2.csv')
mapUrl="https://api.mapbox.com/styles/v1/rungdung/cku6gh76r1dvh17o3zkfllvjz/tiles/256/{z}/{x}/{y}@2x?access_token=pk.eyJ1IjoicnVuZ2R1bmciLCJhIjoiY2tqeWh6cXF4MDgzMjJvbWVmbGQzYjAwMyJ9.U-aJyoqyKvTXlhVk43jV1A"
allData <- rbind(oldHarassData,newHarassData)
allData <- rename(allData, lat=Location.lat, lng = Location.lon)
# Attach a coordinate reference
allCoords <- allData %>%
st_as_sf(coords = c('lng', 'lat'),crs = 4326)
install.packages('XML')
library(XML)
library(methods)
result <- xmlParse("../assets/kodagu_villages.xml")
result <- xmlParse("../assets/kodagu_villages.kml")
setwd("V:/Vault/Areas/SMI/Semester 4/POU/prototypes/region-selector/data-wrangling")
result <- xmlParse("../assets/kodagu_villages.kml")
rootNode<- xmlRoot(result)
xmlSize(rootnode)
xmlSize(rootNode)
print(rootNode)
resultsDF <- xmlToDataFrame(result)
library(tidyverse)
view(resultsDF)
resultsDF <- xmlToDataFrame(rootNode)
view(resultsDF)
source("V:/Vault/Areas/SMI/Semester 4/POU/prototypes/region-selector/data-wrangling/wrangler.r", echo=TRUE)
scheme <- xmlElementSummary(path)
path<-"../assets/kodagu_villages.kml"
scheme <- xmlElementSummary(path)
scheme
